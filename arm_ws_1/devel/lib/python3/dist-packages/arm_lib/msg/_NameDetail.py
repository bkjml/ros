# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arm_lib/NameDetail.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NameDetail(genpy.Message):
  _md5sum = "f7e025c3b5a478fe1f379e73223eb797"
  _type = "arm_lib/NameDetail"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string firstName
    string lastName
        uint8 count

            float32 x
                float32 y
                    float32 z
                        float32 alpha
                            float32 beta
                                float32 gamma
                                    float32 newXX
                                        float32 newXY
                                            float32 newXZ
                                                float32 newYX
                                                    float32 newYY
                                                        float32 newYZ
                                                            float32 newZX
                                                                float32 newZY
                                                                    float32 newZZ
                                                                        float32 distance
"""
  __slots__ = ['firstName','lastName','count','x','y','z','alpha','beta','gamma','newXX','newXY','newXZ','newYX','newYY','newYZ','newZX','newZY','newZZ','distance']
  _slot_types = ['string','string','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       firstName,lastName,count,x,y,z,alpha,beta,gamma,newXX,newXY,newXZ,newYX,newYY,newYZ,newZX,newZY,newZZ,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NameDetail, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.firstName is None:
        self.firstName = ''
      if self.lastName is None:
        self.lastName = ''
      if self.count is None:
        self.count = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.alpha is None:
        self.alpha = 0.
      if self.beta is None:
        self.beta = 0.
      if self.gamma is None:
        self.gamma = 0.
      if self.newXX is None:
        self.newXX = 0.
      if self.newXY is None:
        self.newXY = 0.
      if self.newXZ is None:
        self.newXZ = 0.
      if self.newYX is None:
        self.newYX = 0.
      if self.newYY is None:
        self.newYY = 0.
      if self.newYZ is None:
        self.newYZ = 0.
      if self.newZX is None:
        self.newZX = 0.
      if self.newZY is None:
        self.newZY = 0.
      if self.newZZ is None:
        self.newZZ = 0.
      if self.distance is None:
        self.distance = 0.
    else:
      self.firstName = ''
      self.lastName = ''
      self.count = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.alpha = 0.
      self.beta = 0.
      self.gamma = 0.
      self.newXX = 0.
      self.newXY = 0.
      self.newXZ = 0.
      self.newYX = 0.
      self.newYY = 0.
      self.newYZ = 0.
      self.newZX = 0.
      self.newZY = 0.
      self.newZZ = 0.
      self.distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.firstName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lastName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B16f().pack(_x.count, _x.x, _x.y, _x.z, _x.alpha, _x.beta, _x.gamma, _x.newXX, _x.newXY, _x.newXZ, _x.newYX, _x.newYY, _x.newYZ, _x.newZX, _x.newZY, _x.newZZ, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firstName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.firstName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lastName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lastName = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.count, _x.x, _x.y, _x.z, _x.alpha, _x.beta, _x.gamma, _x.newXX, _x.newXY, _x.newXZ, _x.newYX, _x.newYY, _x.newYZ, _x.newZX, _x.newZY, _x.newZZ, _x.distance,) = _get_struct_B16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.firstName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.lastName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B16f().pack(_x.count, _x.x, _x.y, _x.z, _x.alpha, _x.beta, _x.gamma, _x.newXX, _x.newXY, _x.newXZ, _x.newYX, _x.newYY, _x.newYZ, _x.newZX, _x.newZY, _x.newZZ, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firstName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.firstName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lastName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lastName = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.count, _x.x, _x.y, _x.z, _x.alpha, _x.beta, _x.gamma, _x.newXX, _x.newXY, _x.newXZ, _x.newYX, _x.newYY, _x.newYZ, _x.newZX, _x.newZY, _x.newZZ, _x.distance,) = _get_struct_B16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B16f = None
def _get_struct_B16f():
    global _struct_B16f
    if _struct_B16f is None:
        _struct_B16f = struct.Struct("<B16f")
    return _struct_B16f
